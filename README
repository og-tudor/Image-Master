- Frecus Tudor George - First year faculty project

-> Storage structure :
 I am storing the image as a structure composed of 4 matrixes, 1 for grayscale
and 3 for rgb. The matrixes type is unsigned char.

-> The cases :  
  -LOAD- \<file>
  When loading the image i first check if the input_file actually exists,
 in which case i open the images, reading them in binary, 
 after i allocate space for 1 matrix(grayscale) or 3(rgb)
 after which i call i call the functions read_rgb and read_grayscale
 to populate the matrixes.
 
  -SELECT- \<x1> \<y1> \<x2> \<y2>
 Selects part of the image, all subsequent transformations will be applied only to this selection.
 I read the coordinates, the first one, x1, i read as a string with which i check the SELECT ALL case.
 If i select part of the image i proceed by converting the x1 into an int,
then i check if the selection is validðŸ’¯ or not.

  -SELECT- \<all>
  Selects the whole image for transformations.


 
  -ROTATE- \<angle>
 I check if the selection is validðŸ’¯, in which case i allocate space for either
 1 or 3 matrixes, i call the functions rotate_img(for the whole image) and rotate_square(for part of the selection), in either cases i rotate the matrix by 90Â° line by line from top to bottom moving them to the columns from right to left.
 
  -CROP-
  Crops the image to the current selection.
 I check if a matrix is loaded or not, then i alloc an auxiliary matrix for 
only the dimensions of the selection, after which i populate the aux matrix
then i make the aux matrix the primary one.

  -APPLY- \<parameter>
  - EDGE
  - SHARPEN
  - BLUR
  - GAUSSIAN_BLUR  
  </br>
 I implemented this functionality by first checking if any of the coordinates
are on the edges of the image, after this i apply the effect localy in the primary matrix by creating an auxiliary matrix in which i copy the main one.
Then i go pixel by pixel, applying for each one the values for the effect.
 And in the end i free the auxiliary matrixes.

   -SAVE- \<file_name> [ascii]  
   Saves the current image in the file "file_name", if the [ascii], parameter is prezent it will save the value of the pixels in ascii format, instead of binary.
 With fgets() i read the whole line, after which i separate the name of the
file, if the file is saved as "ascii" then i write all the values using frprintf, if it isn t i write them in binary using fwrite.
 I save the header as ascii indiferently of the type.
 
  -EXIT-
 I check if an image is loaded then i free all the allocated memory.

  -PROJECT ACCOMPLISHMENTS-
- be able to process (using the C language) images in NetPBM format;
- be able to parse a set of program-specific commands;
- be able to write programs that process files (text or binary), following a specific specification;
- have practised the use of user-defined data types (structures, unions and enumerations) in the C language;
- implemented a program with text interface to perform basic transformations on image files.

